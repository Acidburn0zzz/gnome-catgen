#!/usr/bin/env bash

SYSTEMAPPS="/usr/share/applications"
LOCALAPPS="${HOME}/.local/share/applications"

CATPATH="${LOCALAPPS}-categories"
APPNAME=$(grep -o -e "[^\/]*$" <<< "$0")

[[ -z "$EDITOR" ]] && EDITOR=vi

# Gets the list of folders based on the dconf configuration
function getfolders() {
    gsettings get org.gnome.desktop.app-folders folder-children \
        | sed 's|^@as \[\]|None|g' \
        | sed "s|^\[['\"]||g;s|['\"]\]$||g;s|['\"]\ *,\ *['\"]|,\ |g" \
        | sed -re "s|\\\([\"\\\])|\1|g"
}

# Gets the list of folders based on *.category
function _getfolders() {
    for cat in "${CATPATH}"/*.category; do
        [[ -n "$(cat "$cat" | grep -v -e '^ *#')" ]] \
            && echo "$cat"
    done | sed 's|^.*\/||g;s/.category$//g'
}

function getapps() {
    while read -r cat; do
        if [[ ! "$cat" = "@as" ]]; then
            echo -n "${cat}: "
            gsettings get org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"${cat}"/ apps \
                | grep -v "@as \[\]" || echo
            echo
        fi
    done < <(gsettings get org.gnome.desktop.app-folders folder-children \
        | sed "s/\[//g;s/\]//g;s/^['\"]//g;s/['\"]$//g;s/['\"],\ *['\"]/\n/g" \
        | sed -re "s|\\\([\"\\\])|\1|g")
}

function getremaining() {
    # Fail if the config directory is read only or doesn't exist
    [[ ! -w "$CATPATH" ]] \
        && echo "Error: Config folder '$CATPATH' either doesn't exist or isn't writable" \
        && exit 1

    # Create a list of all the applications that don't have NoDisplay=true or Hidden=true
    APPLIST=$(grep -L -i -E "(nodisplay|hidden)\ *=\ *true" "${SYSTEMAPPS}"/*.desktop "${LOCALAPPS}"/*.desktop \
        | sed 's|^.*\/||g' \
        | sort -u)

    # Remove $SYSTEMAPPS with duplicates in $LOCALAPPS that contain NoDisplay=true or Hidden=true
    while read -r application; do
        APPLIST=$(sed "s|${application}\ *||" <<< $APPLIST)
    done < <(grep -l -i -E "(nodisplay|hidden)\ *=\ *true" "${LOCALAPPS}"/*.desktop \
        | grep -o -e "[^\/]*$" | sort -u)

    # Remove all applications that are defined in gnome-catgen categories
    while read -r application; do
        [[ $(grep -v -e "^ *#" <<< '$application') ]] \
            && [[ -n "$application" ]] \
            && APPLIST="$(sed "s|${application}\ *||" <<< $APPLIST)"
    done < <(sed 's|\\|\\\\|g' "${CATPATH}"/*.category)

    sed 's|\.desktop\ \ *|\.desktop\n|g' <<< "$APPLIST"
}

function set() {
    # Fail if the config directory doesn't exist, otherwise announce initiation
    [[ ! -d "$CATPATH" ]] \
        && echo "Error: Config folder '$CATPATH' either doesn't exist or isn't readable" \
        && exit 1
    echo -e "Applying current folder configuration...\n"

    # Wipe out any old folder settings
    echo "Clearing old category data before populating folders"
    dconf reset -f /org/gnome/desktop/app-folders/folders/

    # Create a list of categories to work from using the non-empty .category files
    _CATEGORIES=$(_getfolders)

    # Start the list of dconf categories, built using the one above
    CATEGORIES="["

    # Add the app data for each category and output an error if none is defined
    while read -r cat; do
        # Reset the application list
        unset APPLIST

        # Add applications from the category if they exist, are set to display and aren't commented
        echo -e "\nEvaluating: ${cat}"
        while read -r application; do
            if [ $(grep -v -e "^ *#" <<< '$application') ]; then
                if [[ -f "${LOCALAPPS}/${application}" ]]; then
                    if [[ ! $(grep -i -E "(nodisplay|hidden)\ *=\ *true" "${LOCALAPPS}/${application}") ]]; then
                        [[ -n "$NOTEMPTY" ]] && application=$(echo -e "\n$application")
                        APPLIST=${APPLIST}${application}
                        NOTEMPTY=1
                    fi
                elif [[ -f "${SYSTEMAPPS}/${application}" ]]; then
                    if [[ ! $(grep -i -E "(nodisplay|hidden)\ *=\ *true" "${SYSTEMAPPS}/${application}") ]]; then
                        [[ -n "$NOTEMPTY" ]] && application=$(echo -e "\n$application")
                        APPLIST=${APPLIST}${application}
                        NOTEMPTY=1
                    fi
                fi
            fi
        done < <(cat "${CATPATH}/${cat}.category")
        APPLIST=$(sort -u <<< "$APPLIST")

        # Write the category and its applications if the temp file isn't empty
        if [[ -n "$NOTEMPTY" ]]; then
            # Add $cat to the dconf categories list if it contained any valid apps
            CATEGORIES="${CATEGORIES}, '$(sed 's|\\|\\\\\\|g'";s|'|\\\'|g" <<< "$cat")'"

            # Write the folder category's name to dconf
            gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"${cat}"/ name "$cat"

            # Get the application list and escape any quotes, then write to dconf
            gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"${cat}"/ apps \
                "$(while read -r application; do
                       [[ $(grep "'" <<< "$application") ]] \
                           && sed 's|"|\\"|g;s|^|"|;s|$|"|' <<< "$application" \
                           || sed "s|^|'|;s|$|'|" <<< "$application"
                   done < <(sed 's|\\|\\\\\\|g' <<< "$APPLIST") \
                       | sed -e ':a;N;$!ba;'"s/\n/, /g" \
                       | sed 's|^|\[|;s|$|\]|')"
        fi

        # Free the empty category marker so the next category has to set it again
        unset NOTEMPTY
    done <<< "$_CATEGORIES"

    # Finalize the dconf categories list then write to dconf and finish
    CATEGORIES="$(sed 's|\[, |\[|' <<< $CATEGORIES)]"
    [[ $(grep -v "\[\]" <<< "$CATEGORIES") ]] && gsettings set org.gnome.desktop.app-folders folder-children "$CATEGORIES"
    echo -e "\nDone!"
}

function chooseremaining() {
    # Fail if the config directory is read only or doesn't exist
    [[ ! -w "$CATPATH" ]] \
        && echo "Error: Config folder '$CATPATH' either doesn't exist or isn't writable" \
        && exit 1

    # Start if applications without folders exist
    REMAINING=$(getremaining)
    if [ -n "$REMAINING" ]; then
        # Cycle through the output of getremaining
        echo -e "For each application input: a folder name | blank to skip | ctrl-c to quit.\n"
        echo -n "Folder Categories: "
        _getfolders | sed -e ':a;N;$!ba;'"s/\n/, /g"; echo
        while read -r app; do
            echo -n "$app: "
            read -r CATNAME </dev/tty
            if [ -n "$CATNAME" ]; then
                CHANGED=1
                echo "$app" >> "${CATPATH}/${CATNAME}.category"
            else
                echo "Skipping ${app}..."
            fi
        done <<< "$REMAINING"

        # Offer to run the set function if changes were made
        if [ -n "$CHANGED" ]; then
            while [ 0 ]; do
                echo -en "\nUpdate configured folder categories in Gnome? [y/n]: "
                read SET
                if [ "$SET" = "Y" ] || [ "$SET" = "y" ]; then
                    echo; set; break
                elif [ "$SET" = "N" ] || [ "$SET" = "n" ]; then
                    break
                else
                    echo "Error: Invalid option"
                fi
            done
        else
            echo "Finished without making changes"
        fi
    else
        echo "No uncategorized applications found"
    fi
}

function editcategory() {
    if [[ -n "$1" ]]; then
        echo "Editing ${1}..."
        "$EDITOR" "${CATPATH}/${1}.category"
    else
        echo -e "Error: run with a category name as an argument\n"
        help
        exit 1
    fi
}

function help() {
    # Display help information
    echo -e "${APPNAME} - Gnome 3.12 Folder Category Configuration Tool\n"
    echo -e "SYNOPSIS:\n  ${APPNAME} [COMMAND]\n  ${APPNAME} [COMMAND] {CAT}\n"
    echo -e "COMMANDS:\n  READ:"
    echo -e "    ${APPNAME} [-f |or| --get-folders]: list active folders"
    echo -e "    ${APPNAME} [-a |or| --get-apps]: list apps in each active folders"
    echo -e "    ${APPNAME} [-r |or| --get-remaining]: list apps without a folder"
    echo -e "    ${APPNAME} [-g |or| --get]: list all of the above\n"
    echo "  EDIT:"
    echo -e "    ${APPNAME} [-c |or| --choose-remaining]: assign folders to unassigned apps"
    echo -e "    ${APPNAME} [-e |or| --edit-category] {cat}: edit the .category for {cat}\n"
    echo "  WRITE:"
    echo -e "    ${APPNAME} [-s |or| --set]: apply current folder configuration"
    echo -e "    ${APPNAME} [-x |or| --clear]: remove applied folder configuration\n"
    echo "  INFORMATION:"
    echo -e "    ${APPNAME} [-h |or| --help]: display this help"
}

# Install the gnome-catgen config folder if it doesn't exist
[[ -d "$CATPATH" ]] || install -d "$CATPATH"

# Fail if the config directory is read only or doesn't exist
[[ ! -w "$CATPATH" ]] \
    && echo "Error: Config folder '$CATPATH' either doesn't exist or isn't writable" \
    && exit 1

# Parse commandline arguments
if [[ -n "$1" ]]; then
    for param in $@; do
        case "$param" in
            f|-f|--get-folders)
                getfolders
                ;;
            a|-a|--get-apps)
                getapps
                ;;
            r|-r|--get-remaining)
                getremaining
                ;;
            g|-g|--get)
                echo -n "Active folder categories: "; getfolders
                echo -n -e "\nApplications in each active folder category:"
                echo; getapps
                echo "Applications without configured folder categories:"; getremaining
                ;;
            c|-c|--choose-remaining)
                chooseremaining
                ;;
            e|-e|--edit-category)
                editcategory "$2"
                ;;
            s|-s|--set)
                set
                ;;
            x|-x|--clear)
                gsettings set org.gnome.desktop.app-folders folder-children "[]"
                dconf reset -f /org/gnome/desktop/app-folders/folders/
                ;;
            h|-h|--help)
                help
                exit 0
                ;;
            *)
                echo -e "Error: Invalid option: ${1}\n"; help
                exit 1
                ;;
        esac
    done
else
    echo -e "Error: run with a valid command as an argument\n"
    help
    exit 1
fi
