#!/usr/bin/env bash

CATPATH="${HOME}/.local/share/applications-categories"
TMPFILE="/tmp/gnome-catgen.tmp"
APPNAME=$(echo $0 | grep -o -e "[^\/]*$")

function getfolders() {
    gsettings get org.gnome.desktop.app-folders folder-children
}

function getapps() {
    gsettings get org.gnome.desktop.app-folders folder-children | sed "s/\[//g;s/\]//g;s/^'//g;s/'$//g;s/',\ *'/\n/g" | while read -r cat; do
        echo -n "$cat: "
        gsettings get org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"${cat}"/ apps
        echo
    done
}

function getr() {
    # Fail if the config directory doesn't exist
    if [ ! -d "$CATPATH" ]; then
        echo "The configuration folder '$CATPATH' is either read-only or it doesn't exist"
        exit 1
    fi

    grep -i -L -h "NoDisplay=true" /usr/share/applications/*.desktop | grep -o -e "[^\/]*$" > "${TMPFILE}.1"

    echo -n > "${TMPFILE}.2"
    cat "${TMPFILE}.1" | while read -r program; do
        if [ -f "${HOME}/.local/share/applications/${program}" ]; then
            if [ ! $(cat "${HOME}/.local/share/applications/${program}" | grep -i "NoDisplay=true") ]; then
                echo "$program" >> "${TMPFILE}.2"
            fi
        else
            echo "$program" >> "${TMPFILE}.2"
        fi
    done
    grep -i -L -h "NoDisplay=true" "${HOME}"/.local/share/applications/*.desktop | grep -o -e "[^\/]*$" >> "${TMPFILE}.2"
    cat "${TMPFILE}.2" | sort -u > "${TMPFILE}.1"

    echo -n > "$TMPFILE"
    cat "${TMPFILE}.1" | while read -r program; do
        if [ ! $(cat "${CATPATH}"/*.category  | grep -v -e "[^[\ ]*#" | grep -m 1 "$program") ]; then
            echo "$program" >> "$TMPFILE"
        fi
    done
    cat "$TMPFILE"
    [[ -f "$TMPFILE" ]] && rm "$TMPFILE"
    [[ -f "${TMPFILE}.1" ]] && rm "${TMPFILE}.1"
    [[ -f "${TMPFILE}.2" ]] && rm "${TMPFILE}.2"
}

function set() {
    # Fail if the config directory doesn't exist
    if [ ! -d "$CATPATH" ]; then
        echo "The configuration folder '$CATPATH' is either read-only or it doesn't exist"
        exit 1
    fi

    # Set the category types and reset any current app data
    echo -e "Setting configured folder categories in dconf...\n"
    CATEGORIES=$(for cat in "${CATPATH}"/*; do [[ ! -z $(cat "$cat" | grep -v -e "[^[\ ]*#") ]] && echo "$cat"; done | grep -oe "[^\/]*\.category$" | sed 's/.category//g' | sed -e ':a;N;$!ba;'"s/\n/', '/g;s/^/['/g;s/$/']/g")
    gsettings set org.gnome.desktop.app-folders folder-children "$CATEGORIES"

    echo "Clearing old category data before populating"
    dconf reset -f /org/gnome/desktop/app-folders/folders/

    # Add the app data for each category and output an error if none is defined
    gsettings get org.gnome.desktop.app-folders folder-children | sed "s/\[//g;s/\]//g;s/^'//g;s/'$//g;s/',\ *'/\n/g" | while read -r cat; do
        echo -e "\nAdding category: ${cat}"
        echo -n > "$TMPFILE"
        cat "${CATPATH}/${cat}.category" | while read -r program; do
            if [ "$(echo "$program" | grep -v -e "[^[\ ]*#")" ]; then
                if [ -f "/usr/share/applications/${program}" ] || [ -f "${HOME}/.local/share/applications/${program}" ]; then
                    echo "$program" >> "$TMPFILE"
                fi
            fi
        done
        if [ ! $(cat "$TMPFILE" | wc -l) = 0 ]; then
            CATEGORY=$(sed -e ':a;N;$!ba;'"s/\n/', '/g" "$TMPFILE" | sed "s/^[\"',\ ]*/['/g;s/[\"',\ ]*$/']/g")
            gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"${cat}"/ apps "$CATEGORY"
            gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"${cat}"/ name "$cat"
        fi
    done
    [[ -f "$TMPFILE" ]] && rm "$TMPFILE"
    echo -e "\nDone!"
}

function chooser() {
    # Fail if the config directory isn't available and writable
    if [ ! -w "$CATPATH" ]; then
        echo "The configuration folder '$CATPATH' is either read-only or it doesn't exist"
        exit 1
    fi

    echo -e "Type the desired category name for each program then hit enter, blank to skip and ctrl-c to quit.\n"
    getr | while read -r app; do
        echo -n "$app: "
        read CAT </dev/tty
        [[ ! -z "$CAT" ]] && echo "$app" >> "${CATPATH}/${CAT}.category" || echo "Skipping ${app}..."
    done

    while [ 0 ]; do
        echo -en "\nCreate and populate configured folder categories in dconf? [y/n]: "
        read SET
        if [ "$SET" = "Y" ] || [ "$SET" = "y" ]; then
            set; break
        elif [ "$SET" = "N" ] || [ "$SET" = "n" ]; then
            break
        else
            echo "Error: Invalid option"
        fi
    done
}

function help() {
    echo -e "GNOME CATGEN (Folder Category Generator for Gnome 3.12)\n"
    echo -e "To use, create files named after a folder category and ending with '.category' in '${CATPATH}/' (eg: '${CATPATH}/Games.category'), then inside each, put the filename of the .desktop file associated with an application you'd like to include on each line (eg: 'gvim.desktop'). Lines starting with # or that include .desktop files that don't exist in /usr/share/applications or ~/.local/share/applications will be ignored. When you're ready, run '$0 set' to generate your folders.\n"
    echo "Please run with a command:"
    echo -e "\t${APPNAME} get-folders | list the folder categories set in dconf"
    echo -e "\t${APPNAME} get-apps | list the apps for each folder set in dconf"
    echo -e "\t${APPNAME} get-remaining 'or' getr | list the apps without a folder category in the config"
    echo -e "\t${APPNAME} get | list all of the above with labels\n"
    echo -e "\t${APPNAME} choose-remaining 'or' chooser | choose folder categories for apps currently without one in the config"
    echo -e "\t${APPNAME} set | create and populate configured folder categories in dconf"
    echo -e "\t${APPNAME} clear | remove all folder categories and their contents from dconf (doesn't touch config)\n"
    echo -e "\t${APPNAME} help 'or' -h 'or' --help | display this help"
}

[[ -d "$CATPATH" ]] || install -d "$CATPATH"

if [ -n "$1" ]; then
    if [ "$1" = "get-folders" ]; then
        getfolders
    elif [ "$1" = "get-apps" ]; then
        getapps
    elif [ "$1" = "get-remaining" ] || [ "$1" = "getr" ]; then
        getr
    elif [ "$1" = "get" ]; then
        echo -n "Folders: "; getfolders
        echo; getapps
        echo "Programs in Activities without folders:"; getr
    elif [ "$1" = "choose-remaining" ] || [ "$1" = "chooser" ]; then
        chooser
    elif [ "$1" = "set" ]; then
        set
    elif [ "$1" = "clear" ]; then
        # Set the category types and reset any current app data
        gsettings set org.gnome.desktop.app-folders folder-children "[]"
        dconf reset -f /org/gnome/desktop/app-folders/folders/
    elif [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        help
        exit 0
    else
        echo -e "Error: Invalid option: ${1}\n"
        help
        exit 1
    fi
else
    echo -e "Error: please run with a valid command\n"
    help
    exit 1
fi
